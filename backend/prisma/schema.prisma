generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model User {
  id             String         @id @default(uuid())
  username       String         @unique @db.VarChar(32)
  displayName    String         @db.VarChar(32)
  password       String         @db.Text
  avatar         String?        @db.Text
  banner         String?        @db.Text
  bio            String?        @db.VarChar(255)
  isDeleted      Boolean        @default(false)
  lastSeen       DateTime       @default(now()) @db.Timestamptz(3)
  createdAt      DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime       @default(now()) @db.Timestamptz(3)
  friends        Friend[]       @relation("friendOf")
  friendsOf      Friend[]       @relation("friend")
  participations Participant[]
  messages       Message[]
  requests       Notification[] @relation("request")
  notifications  Notification[] @relation("notification")
}

model Friend {
  friendOf   User          @relation("friendOf", fields: [friendOfId], references: [id])
  friendOfId String
  friend     User          @relation("friend", fields: [friendId], references: [id])
  friendId   String
  createdAt  DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime      @default(now()) @db.Timestamptz(3)
  status     FriendsStatus @default(PENDING)

  @@id([friendOfId, friendId])
}

enum FriendsStatus {
  PENDING
  ACTIVE
}

model Community {
  id                String         @id @default(uuid())
  name              String         @unique @db.VarChar(128)
  bio               String?        @db.VarChar(255)
  avatar            String?        @db.Text
  banner            String?        @db.Text
  isDeleted         Boolean        @default(false)
  createdAt         DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime       @default(now()) @db.Timestamptz(3)
  inbox             Inbox?
  participantsCount Int            @default(0)
  participants      Participant[]
  Notifications     Notification[]
}

model DirectMessage {
  id           String        @id @default(uuid())
  inbox        Inbox?
  participants Participant[]
}

model Inbox {
  id              String         @id @default(uuid())
  inboxType       InboxType
  community       Community?     @relation(fields: [communityId], references: [id])
  communityId     String?        @unique
  directMessage   DirectMessage? @relation(fields: [directMessageId], references: [id])
  directMessageId String?        @unique
  messages        Message[]
}

enum InboxType {
  DM
  COMMUNITY
}

model Participant {
  id              String            @id @default(uuid())
  user            User              @relation(fields: [userId], references: [id])
  userId          String
  role            ParticipantRole
  status          ParticipantStatus @default(PENDING)
  community       Community?        @relation(fields: [communityId], references: [id])
  communityId     String?
  directMessage   DirectMessage?    @relation(fields: [directMessageId], references: [id])
  directMessageId String?
  createdAt       DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime          @default(now()) @db.Timestamptz(3)
  memberSince     DateTime?         @db.Timestamptz(3)
}

enum ParticipantRole {
  OWNER
  MEMBER
}

enum ParticipantStatus {
  PENDING
  ACTIVE
}

model Message {
  id                  String       @id @default(uuid())
  inbox               Inbox        @relation(fields: [inboxId], references: [id])
  inboxId             String
  author              User         @relation(fields: [authorId], references: [id])
  authorId            String
  content             String       @db.VarChar(2560)
  createdAt           DateTime     @default(now()) @db.Timestamptz(3)
  updatedAt           DateTime     @default(now()) @db.Timestamptz(3)
  isDeleted           Boolean      @default(false)
  isRead              Boolean      @default(false)
  hiddenFromAuthor    Boolean      @default(false)
  hiddenFromRecipient Boolean      @default(false)
  replyToId           String?
  replyTo             Message?     @relation("replies", fields: [replyToId], references: [id])
  replyBy             Message[]    @relation("replies")
  attachments         Attachment[]
}

model Attachment {
  id           String            @id @default(uuid())
  message      Message?          @relation(fields: [messageId], references: [id])
  messageId    String?
  type         AttachmentType
  subtype      AttachmentSubtype
  height       Int?
  width        Int?
  size         Int?
  url          String            @db.Text
  thumbnailUrl String            @db.Text
}

model Notification {
  id             String                 @id @default(uuid())
  triggeredBy    User                   @relation("request", fields: [triggeredById], references: [id])
  triggeredById  String
  triggeredFor   User                   @relation("notification", fields: [triggeredForId], references: [id])
  triggeredForId String
  isRead         Boolean
  createdAt      DateTime               @default(now()) @db.Timestamptz(3)
  type           NotificationType
  status         NotificationStatusType @default(PENDING)
  payload        String
  community      Community?             @relation(fields: [communityId], references: [id])
  communityId    String?
}

enum AttachmentType {
  IMAGE
}

enum AttachmentSubtype {
  JPEG
  PNG
  GIF
}

enum NotificationType {
  FRIENDREQUEST
  COMMUNITYREQUEST
  REQUESTUPDATE
}

enum NotificationStatusType {
  PENDING
  REJECTED
  ACCEPTED
  COMPLETED
}
